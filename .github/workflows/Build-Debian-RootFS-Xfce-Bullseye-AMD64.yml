name: Build-sunshineai-debian-bullseye-AMD64

on:
  # push:
  #   branches:
  #     - main
  workflow_dispatch:  # 你可以根据需要触发这个工作流，例如通过手动触发

jobs:
  build-rootfs:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Clean Up Environments
        run: | 
          # sudo apt-get update && sudo apt-get install -y wget curl
          # wget https://raw.githubusercontent.com/actions/runner-images/refs/heads/main/images/ubuntu/toolsets/toolset-2004.json
          # APT_PACKAGES=`cat toolset-2004.json | jq -r '.apt | [.vital_packages[], .common_packages[], .cmd_packages[]] | del(.[] | select(. == "lib32z1")) | join(" ")'`
          # sudo apt update && sudo apt-get purge -y ${APT_PACKAGES} && df -h
          sudo bash ./scripts/envcleaner.sh

      - name: Set up QEMU user mode emulator (for debootstrap)
        run: sudo apt-get update && sudo apt-get install -y sudo qemu-user-static qemu-utils qemu-system-common debootstrap && tree && df -h 

      - name: Create working directory
        run: mkdir -p rootfs && tree

      - name: Bootstrap Debian rootfs
        run: |
          set -e
          DEBIAN_FRONTEND=noninteractive sudo debootstrap --variant=buildd --arch=amd64 bullseye rootfs http://deb.debian.org/debian

      - name: Install required packages
        run: |
          set -e
          sudo chroot rootfs /bin/bash -c "
            apt-get update &&
            apt-get install -y gcc*multilib g++*multilib gcc*x86-64*linux*gnu g++*x86-64*linux*gnu tree progress apt-mirror libqt5dbus5 libqt5core5a libqt5gui5 libqt5widgets5 openssh* debootstrap dbus* curl* wget* sysvinit-utils sudo chromium* flatpak* software-properties-common xfce* xf* lsb-release* libvte-* ca-certificates locales-all locales build-e* fonts-noto* fonts-wqy* nano tasksel* apt-utils xrdp* bash-completion bc bzip2 curl dialog diffutils findutils gnupg gnupg2 gpgsm hostname iproute2 iputils-ping keyutils less libcap2-bin libkrb5-3 libnss-mdns libnss-myhostname libvte-common locales lsof man-db manpages mtr ncurses-base openssh-client passwd pigz pinentry-curses procps rsync sudo tcpdump time traceroute tree tzdata unzip util-linux wget xauth xz-utils zip libgl1 libegl1-mesa libgl1-mesa-glx libegl1 libglx-mesa0 libvulkan1 mesa-vulkan-drivers git git-lfs &&
            sudo lsb_release -a && 
            sudo useradd -m "Administrator" -s /bin/bash && 
            echo "Administrator:123456789" | sudo chpasswd && 
            echo "root:123456789" | sudo chpasswd && 
            sudo usermod -d /home/Administrator/ Administrator
          "

      - name: Add Some Essential Folder
        run: |
          mkdir -p rootfs/runner && mkdir -p rootfs/app && mkdir -p rootfs/SunshineAI && mkdir -p rootfs/lost+found &&
          mkdir -p rootfs/runner/Linux/x86_64 &&
          mkdir -p rootfs/runner/Linux/ARM64 &&
          mkdir -p rootfs/runner/Linux/Power &&
          mkdir -p rootfs/runner/macOS/Intel/x86_64 &&
          mkdir -p rootfs/runner/macOS/Silicon/M1/ARM64 &&
          mkdir -p rootfs/DATA/{AppData,Documents,Downloads,Gallery,Media/{Movies,Music,"TV Shows"}}

      - name: Init Runner Files
        run: |
          set -e
          sudo chroot rootfs /bin/bash -c "
            cd /runner/Linux/x86_64 && curl -Ls https://micro.mamba.pm/api/micromamba/linux-64/latest | tar -xvj &&
            cd /runner/Linux/ARM64 && curl -Ls https://micro.mamba.pm/api/micromamba/linux-aarch64/latest | tar -xvj &&
            cd /runner/Linux/Power && curl -Ls https://micro.mamba.pm/api/micromamba/linux-ppc64le/latest | tar -xvj && 
            cd /runner/macOS/Intel/x86_64 && curl -Ls https://micro.mamba.pm/api/micromamba/osx-64/latest | tar -xvj && 
            cd /runner/macOS/Silicon/M1/ARM64 && curl -Ls https://micro.mamba.pm/api/micromamba/osx-arm64/latest | tar -xvj 
          "

      - name: DATA Folder Init
        run: | 
          set -e 
          sudo chroot rootfs /bin/bash -c "
            export BASE_DIR="/DATA" && 
            mkdir -p "/DATA" &&
            mkdir -p "/DATA/AppData" &&
            mkdir -p "/DATA/Documents" &&
            mkdir -p "/DATA/Downloads" &&
            mkdir -p "/DATA/Gallery" &&
            mkdir -p "/DATA/Compressed" &&
            mkdir -p "/DATA/Desktop" &&
            mkdir -p "/DATA/Games" &&
            mkdir -p "/DATA/General" &&
            mkdir -p "/DATA/ISOS" &&
            mkdir -p "/DATA/Media" &&
            mkdir -p "/DATA/Others" &&
            mkdir -p "/DATA/Programs" &&
            mkdir -p "/DATA/Public" &&
            mkdir -p "/DATA/Templates" &&
            mkdir -p "/DATA/Tools" &&
            mkdir -p "/DATA/Torrents" &&
            mkdir -p "/DATA/Videos" &&
            mkdir -p "/DATA/Media/Movies" &&
            mkdir -p "/DATA/Media/Music" &&
            mkdir -p "/DATA/Media/TV_Shows" &&
            tree /DATA &&
            echo "Create Folder Complete !!!"
          "

      - name: Add Some Essential Repo
        run: |
          set -e 
          sudo chroot rootfs /bin/bash -c "
            apt-get update &&
            cp /home/Administrator/.bashrc /root/.bashrc && 
            apt update && apt full-upgrade -y &&
            apt-get update && apt-get install -y wget apt-transport-https &&
            apt-get update && cd ~ &&
            curl -L https://ollama.com/download/ollama-linux-amd64.tgz -o ollama-linux-amd64.tgz &&
            sudo tar -C /usr -xzf ollama-linux-amd64.tgz &&
            sudo useradd -r -s /bin/false -U -m -d /usr/share/ollama ollama &&
            sudo usermod -a -G ollama root && 
            sudo usermod -a -G ollama Administrator && 
            curl -fsSL https://deb.nodesource.com/setup_20.x | sudo bash - 
          "     

      - name: Remove Compress
        run: |
          sudo chroot rootfs /bin/bash -c "sudo rm -rf ollama-linux-amd64.tgz"

      - name: ADD SunshineAI Software Installer  
        run: | 
          set -e 
          sudo mount --bind /dev ./rootfs/dev
          sudo mount --bind /proc ./rootfs/proc
          sudo mount --bind /sys ./rootfs/sys
          sudo mount --bind /dev/pts ./rootfs/dev/pts
          sudo cp ./scripts/mysql-installer ./rootfs/usr/bin/mysql-installer-sunshineai
          sudo cp ./scripts/mysql-installer ./rootfs/bin/mysql-installer-sunshineai
          sudo chmod 777 ./rootfs/usr/bin/mysql-installer-sunshineai
          sudo chmod 777 ./rootfs/bin/mysql-installer-sunshineai
          sudo cp ./scripts/micromamba-installer ./rootfs/usr/bin/micromamba-installer-sunshineai
          sudo cp ./scripts/micromamba-installer ./rootfs/bin/micromamba-installer-sunshineai
          sudo chmod 777 ./rootfs/usr/bin/micromamba-installer-sunshineai
          sudo chmod 777 ./rootfs/bin/micromamba-installer-sunshineai
          sudo cp ./scripts/redis-installer ./rootfs/usr/bin/redis-installer-sunshineai
          sudo cp ./scripts/redis-installer ./rootfs/bin/redis-installer-sunshineai
          sudo chmod 777 ./rootfs/usr/bin/redis-installer-sunshineai 
          wget https://hf-mirror.com/hfd/hfd.sh
          sudo cp hfd.sh ./rootfs/usr/bin/hfd 
          sudo chmod 777 ./rootfs/usr/bin/hfd
          sudo cp hfd.sh ./rootfs/bin/hfd 
          sudo chmod 777 ./rootfs/bin/hfd
          sudo cp ./scripts/chroot-cleaner ./rootfs/bin/image-cleaner
          sudo chmod 777 ./rootfs/bin/image-cleaner
          sudo cp wsl.conf ./rootfs/etc/wsl.conf
          sudo chmod 644 ./rootfs/etc/wsl.conf          
          sudo chroot rootfs /bin/bash -c "sudo bash /bin/mysql-installer-sunshineai"
          sudo chroot rootfs /bin/bash -c "sudo bash /bin/redis-installer-sunshineai"
          sudo chroot rootfs /bin/bash -c "sudo bash /bin/image-cleaner"
          sudo umount -lf ./rootfs/dev
          sudo umount -lf ./rootfs/proc
          sudo umount -lf ./rootfs/sys

      - name: Tar the rootfs
        run: |
          cd rootfs
          sudo tar --numeric-owner -cvf ../debian-rootfs.tar .
          cd ..
      
      - name: Remove Rootfs Folder
        run: |
          sudo rm -rf rootfs/

      # 登录到 Docker Registry
      - name: Log in to Docker Registry
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 设置镜像名称和时间戳
      - name: Set Image Name and Timestamp
        id: vars
        run: |
          TIMESTAMP=$(date +'%Y%m%d%H%M%S')
          IMAGE_NAME="sunshineai-debian-bullseye:$TIMESTAMP"
          LATEST_IMAGE="sunshineai-debian-bullseye:xfce"
          FULL_IMAGE_NAME="${{ secrets.DOCKER_REGISTRY }}/$IMAGE_NAME"
          LATEST_FULL_IMAGE_NAME="${{ secrets.DOCKER_REGISTRY }}/$LATEST_IMAGE"
          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV
          echo "FULL_IMAGE_NAME=$FULL_IMAGE_NAME" >> $GITHUB_ENV
          echo "LATEST_FULL_IMAGE_NAME=$LATEST_FULL_IMAGE_NAME" >> $GITHUB_ENV
      # 检查镜像是否存在
      - name: Check if Image Exists
        id: check-image
        run: |
          IMAGE_EXISTS=$(curl -s -o /dev/null -w "%{http_code}" -u "${{ secrets.DOCKER_USERNAME }}:${{ secrets.DOCKER_PASSWORD }}" "https://${{ secrets.DOCKER_REGISTRY }}/v2/sunshineai-debian-bullseye/tags/list" | grep -c "200")
          if [ "$IMAGE_EXISTS" -eq 0 ]; then
            echo "Image does not exist. It will be created."
          else
            echo "Image already exists."
          fi
        continue-on-error: true

      # 使用 docker import --platform=linux/amd64创建镜像
      - name: Import Debian RootFS as Docker Image
        run: |
          docker import --platform=linux/amd64 debian-rootfs.tar "${{ env.FULL_IMAGE_NAME }}"
          echo "Image ${{ env.FULL_IMAGE_NAME }} imported successfully."

      # 推送镜像到 Docker Registry
      - name: Push Docker Image
        run: |
          docker push "${{ env.FULL_IMAGE_NAME }}"
          echo "Pushed Docker Image: ${{ env.FULL_IMAGE_NAME }}"

      # 输出镜像详情
      - name: Display Image Details
        run: |
          echo "Docker Image URL: ${{ env.FULL_IMAGE_NAME }}"

      # 创建或更新 latest 标签
      - name: Tag and Push Latest
        run: |
          docker tag "${{ env.FULL_IMAGE_NAME }}" "${{ env.LATEST_FULL_IMAGE_NAME }}"
          docker push "${{ env.LATEST_FULL_IMAGE_NAME }}"
          echo "Updated latest tag to: ${{ env.LATEST_FULL_IMAGE_NAME }}"

      - name: Upload rootfs tarball
        uses: actions/upload-artifact@v4
        with:
          name: SunshineAI-RootFS-Xfce
          path: debian-rootfs.tar